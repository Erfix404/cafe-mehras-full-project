# --- مرحله اول: مرحله ساخت (Build Stage) ---
# ما از یک ایمیج رسمی و سبک Node.js به عنوان پایه استفاده می‌کنیم.
# 'AS build' به این مرحله یک نام می‌دهد تا بعداً به آن ارجاع دهیم.
FROM node:18-alpine AS build

# پوشه کاری خود را در داخل کانتینر مشخص می‌کنیم.
WORKDIR /app

# ابتدا فایل‌های شناسنامه پروژه را کپی می‌کنیم.
# این یک بهینه‌سازی مهم است. اگر کد ما تغییر کند ولی پکیج‌ها ثابت باشند،
# داکر از کش استفاده می‌کند و پکیج‌ها را دوباره نصب نمی‌کند.
COPY package.json ./
COPY package-lock.json ./

# تمام پکیج‌های لازم برای پروژه را نصب می‌کنیم.
RUN npm install

# حالا تمام کدهای منبع پروژه را به پوشه کاری کپی می‌کنیم.
COPY . .

# پروژه ری‌اکت را برای حالت پروداکشن (نهایی) بیلد می‌کنیم.
# این دستور یک پوشه `build` با فایل‌های فشرده و بهینه شده جاوا اسکریپت و CSS می‌سازد.
RUN npm run build

# --- مرحله دوم: مرحله اجرا (Production Stage) ---
# حالا از یک سرور وب بسیار سبک و بهینه به نام Nginx برای اجرای فایل‌های نهایی استفاده می‌کنیم.
# این کار باعث می‌شود ایمیج نهایی ما بسیار کوچک و امن باشد.
FROM nginx:stable-alpine

# فایل‌های بیلد شده از مرحله قبل را به پوشه پیش‌فرض وب سرور Nginx کپی می‌کنیم.
COPY --from=build /app/build /usr/share/nginx/html

# فایل پیکربندی سفارشی Nginx را که در مراحل بعد می‌سازیم، کپی می‌کنیم.
# این فایل برای پشتیبانی از روتینگ برنامه‌های تک‌صفحه‌ای (SPA) مانند ری‌اکت ضروری است.
COPY nginx/nginx.conf /etc/nginx/conf.d/default.conf

# به داکر می‌گوییم که کانتینر ما روی پورت 80 گوش خواهد داد.
EXPOSE 80

# دستور نهایی برای اجرای سرور Nginx در پیش‌زمینه (foreground).
CMD ["nginx", "-g", "daemon off;"]
